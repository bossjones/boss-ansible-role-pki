---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# boss.pki default variables [[[
# ================================

# .. contents:: Sections
#    :local:
#
# .. include:: includes/all.rst


# Global PKI configuration [[[
# ----------------------------

# .. envvar:: boss__pki__enabled [[[
#
# Enable or disable PKI support.
boss__pki__enabled: '{{ (True
                  if boss__pki__default_domain
                  else False) | bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__download_extra [[[
#
# Enable or disable extra file copying.
boss__pki__download_extra: True

                                                                   # ]]]
# .. envvar:: boss__pki__internal [[[
#
# Enable or disable support for internal certificates. If the support is
# disabled, the PKI realm will generate its own set of self-signed
# certificates on remote hosts.
boss__pki__internal: '{{ (True
                   if boss__pki__default_domain
                   else False) | bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__fqdn [[[
#
# Fully Qualified Domain Name of the remote host that is managed by
# the ``boss.pki`` role. This variable is important in Ansible tasks that
# maintain files in the :file:`secret/` directory, as well as correct
# identification of hosts which should have certificates signed by the internal
# Certificate Authority.
boss__pki__fqdn: '{{ ansible_fqdn }}'

                                                                   # ]]]
# .. envvar:: boss__pki__inventory_groups [[[
#
# List of Ansible inventory group names which are taken into account while
# managing the PKI realms. These inventory groups will have their own
# directories inside the :file:`secret/pki/realms/by-group/` directory on the
# Ansible Controller, and files put there will be copied to remote hosts.
boss__pki__inventory_groups: [ 'boss_service_pki' ]

                                                                   # ]]]
# .. envvar:: boss__pki__vcs_ignore_patterns_role [[[
#
# This list of ignore patterns for files below :file:`/etc/pki` that version
# control systems should ignore.
# :file:`/etc` is not tracked by default by a version control system.
# This definition exists preliminary in case you decide to use
# :program:`etckeeper` for example to track changes in :file:`/etc`. In case
# you want to track sensitive files by a version control system specify:
#
# .. code-block:: yaml
#   :linenos:
#
#    boss__pki__vcs_ignore_patterns_role: []
#
# in your inventory and be sure that you know what you are doing!
#
# Note that currently, only :command:`git` as version control system is supported. If
# you use another version control system, be sure to add support for it to
# this role.
# Ignore patterns are specified using the :file:`.gitignore` file format
# documented in :manpage:`gitignore(5)`.
# By default, any file path below :file:`/etc/pki` contained in a subdirectory
# called :file:`private` will not be tracked.
#
# .. note:: When you started using this role before version 0.2.11 and
#    sensitive files are already tracked by version control you will need to
#    manually deleted them from version control history!
#
boss__pki__vcs_ignore_patterns_role: [ '**/private/**' ]

                                                                   # ]]]
# .. envvar:: boss__pki__vcs_ignore_patterns [[[
#
# Refer to  :envvar:`boss__pki__vcs_ignore_patterns_role` for details.
# This variable is intended to be used in Ansibleâ€™s global inventory and allows
# you to define additional file patterns without having to overwrite the
# recommended ignore list maintained by this role.
boss__pki__vcs_ignore_patterns: []

                                                                   # ]]]
# .. envvar:: boss__pki__vcs_ignore_patterns_group [[[
#
# Refer to  :envvar:`boss__pki__vcs_ignore_patterns_role` for details.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported) and allows you to define additional file
# patterns without having to overwrite the recommended ignore list maintained by
# this role.
boss__pki__vcs_ignore_patterns_group: []

                                                                   # ]]]
# .. envvar:: boss__pki__vcs_ignore_patterns_host [[[
#
# Refer to  :envvar:`boss__pki__vcs_ignore_patterns_role` for details.
# This variable is intended to be used in a host inventory group of Ansible
# (only one host group is supported) and allows you to define additional file
# patterns without having to overwrite the recommended ignore list maintained by
# this role.
boss__pki__vcs_ignore_patterns_host: []
                                                                   # ]]]
                                                                   # ]]]
# Automatic Certificate Management Environment [[[
# ------------------------------------------------

# .. envvar:: boss__pki__acme [[[
#
# Enable or disable support for ACME certificates.
boss__pki__acme: '{{ (True
               if ((ansible_all_ipv4_addresses|d([]) +
                    ansible_all_ipv6_addresses|d([])) | ipaddr("public") and
                    boss__pki__default_domain)
               else False) | bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_install [[[
#
# Install ACME support but don't enable it by default for each realm.
boss__pki__acme_install: '{{ boss__pki__acme | bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_library [[[
#
# The crypto library used to generate Certificate Signing Requests for ACME
# certificates, either :command:`openssl` or :command:`gnutls`. Currently
# OpenSSL is recommended due to issues with GnuTLS generation.
boss__pki__acme_library: 'openssl'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_user [[[
#
# Name of the system user account which will be used to interact with the ACME
# Certificate Authority.
boss__pki__acme_user: 'pki-acme'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_group [[[
#
# Name of the system group which will be used to interact with the ACME
# Certificate Authority.
boss__pki__acme_group: 'pki-acme'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_home [[[
#
# Home of the user account that interacts with the ACME Certificate Authority.
boss__pki__acme_home: '/run/pki-acme'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_default_subdomains [[[
#
# List of DNS subdomains that will be added by default to each apex (root)
# domain configured in ACME Certificate Signing Requests.
boss__pki__acme_default_subdomains: []

                                                                   # ]]]
# .. envvar:: boss__pki__acme_type [[[
#
# ACME client to use to interact with the ACME Certificate Authority. At the
# moment only :program:`acme-tiny` is supported.
boss__pki__acme_type: 'acme-tiny'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_tiny_repo [[[
#
# URL of the :program:`acme-tiny` :command:`git` repository.
boss__pki__acme_tiny_repo: 'https://github.com/diafygi/acme-tiny'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_tiny_version [[[
#
# Branch or version of the :program:`acme-tiny` source which should be used.
boss__pki__acme_tiny_version: 'master'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_tiny_src [[[
#
# Directory where :program:`acme-tiny` source code will be cloned into for deployment.
boss__pki__acme_tiny_src: '{{ (ansible_local.root.src
                        if (ansible_local|d() and ansible_local.root|d() and
                            ansible_local.root.src|d())
                        else "/usr/local/src") + "/" + boss__pki__acme_user }}'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_tiny_bin [[[
#
# Path where the :program:`acme-tiny` script will be installed.
boss__pki__acme_tiny_bin: '/usr/local/lib/pki/acme-tiny'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_ca [[[
#
# Name of the ACME API endpoint used by the ACME client. The name-URL mapping
# is done in :envvar:`boss__pki__acme_ca_api_map` dictionary variable.
boss__pki__acme_ca: 'le-live'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_ca_api_map [[[
#
# Dictionary map of the ACME API endpoints, mapped to custom names, used by the
# ACME client.
# Refer to the `Let's Encrypt Staging Environment documentation <https://letsencrypt.org/docs/staging-environment/>`__
# for details about ``le-staging``.
boss__pki__acme_ca_api_map:
  'le-live':    'https://acme-v01.api.letsencrypt.org'
  'le-staging': 'https://acme-staging.api.letsencrypt.org'

                                                                   # ]]]
# .. envvar:: boss__pki__acme_challenge_dir [[[
#
# Directory where the ACME client should store responses to ACME CA challenges.
# By default it's defined by the boss.nginx_ Ansible role using Ansible
# facts.
boss__pki__acme_challenge_dir: '{{ (ansible_local.nginx.acme_root
                             if (ansible_local|d() and ansible_local.nginx|d() and
                                 ansible_local.nginx.acme_root|d())
                             else "/srv/www/sites/acme/public") +
                             "/.well-known/acme-challenge" }}'

                                                                   # ]]]
# .. envvar:: boss__pki__create_acme_challenge_dir [[[
#
# Whether the directory where the ACME client should store responses
# should be created.
boss__pki__create_acme_challenge_dir: '{{ True if (ansible_local|d() and ansible_local.nginx|d() and
                                            ansible_local.nginx.acme|d() and
                                            ansible_local.nginx.acme|bool) else False }}'
                                                                   # ]]]
                                                                   # ]]]
# Required software packages [[[
# ------------------------------

# .. envvar:: boss__pki__base_packages [[[
#
# List of APT packages to install by default on the remote host for
# cryptographic support.
boss__pki__base_packages: [ 'ssl-cert', 'make', 'ca-certificates',
                     'gnutls-bin', 'openssl', 'acl' ]

                                                                   # ]]]
# .. envvar:: boss__pki__acme_packages [[[
#
# List of APT packages required by ACME support.
# :program:`acme-tiny` itself is not yet available in Debian Stable.
# Ref: https://packages.debian.org/source/stretch/acme-tiny
boss__pki__acme_packages: [ 'curl', 'git' ]

                                                                   # ]]]
# .. envvar:: boss__pki__packages [[[
#
# List of additional APT packages to install.
boss__pki__packages: []
                                                                   # ]]]
                                                                   # ]]]
# Directory, file and user/group configuration [[[
# ------------------------------------------------

# .. envvar:: boss__pki__root [[[
#
# Root directory of the PKI configuration on remote hosts.
boss__pki__root: '/etc/pki'

                                                                   # ]]]
# .. envvar:: boss__pki__public_group [[[
#
# Default system group which owns the public files and directories.
boss__pki__public_group: 'root'

                                                                   # ]]]
# .. envvar:: boss__pki__private_group [[[
#
# Default system group which owns the private files and directories.
boss__pki__private_group: 'ssl-cert'

                                                                   # ]]]
# .. envvar:: boss__pki__public_dir_mode [[[
#
# Octal permissions of the public directories.
boss__pki__public_dir_mode: '0755'

                                                                   # ]]]
# .. envvar:: boss__pki__private_dir_mode [[[
#
# Octal permissions of private directories.
boss__pki__private_dir_mode: '0750'

                                                                   # ]]]
# .. envvar:: boss__pki__public_mode [[[
#
# Octal permissions of public files.
boss__pki__public_mode: '0644'

                                                                   # ]]]
# .. envvar:: boss__pki__private_mode [[[
#
# Octal permissions of private files.
boss__pki__private_mode: '0640'

                                                                   # ]]]
# .. envvar:: boss__pki__private_groups_present [[[
#
# Create system group specified here if they don't exist. This can be used to
# ensure that private directories and files are owned by correct group before the
# role that creates the group is run by Ansible. See
# :ref:`boss__pki___ref_private_groups_present` for more details.
boss__pki__private_groups_present: []

                                                                   # ]]]
# .. envvar:: boss__pki__private_dir_acl_groups [[[
#
# List of system groups which should have access to the ``private`` directory
# of each realm, unless specified otherwise. The execute access will be granted
# using the filesystem ACL table.
boss__pki__private_dir_acl_groups: []

                                                                   # ]]]
# .. envvar:: boss__pki__private_file_acl_groups [[[
#
# List of system groups which should have read access to key files in
# :file:`private/` directory of each realm, unless specified otherwise. The read
# access will be granted using the filesystem ACL table.
boss__pki__private_file_acl_groups: []
                                                                   # ]]]
                                                                   # ]]]
# Certificate sign times [[[
# --------------------------

# .. envvar:: boss__pki__default_sign_base [[[
#
# The base amount of time in days which is used for signing various
# certificates. By default, 1 year.
boss__pki__default_sign_base: '365'

                                                                   # ]]]
# .. envvar:: boss__pki__default_root_sign_multiplier [[[
#
# Amount of time which Root Certificate Authority will be valid, multiplied by
# the base time amount.
boss__pki__default_root_sign_multiplier: '12'

                                                                   # ]]]
# .. envvar:: boss__pki__default_ca_sign_multiplier [[[
#
# Amount of time which intermediate CA certificates will be valid, multiplied
# by the base time amount.
boss__pki__default_ca_sign_multiplier: '10'

                                                                   # ]]]
# .. envvar:: boss__pki__default_cert_sign_multiplier [[[
#
# Amount of time which client/server certificates will be valid, multiplied by
# the base time amount.
boss__pki__default_cert_sign_multiplier: '3'
                                                                   # ]]]
                                                                   # ]]]
# Configuration of PKI Realms [[[
# -------------------------------

# .. envvar:: boss__pki__library [[[
#
# The crypto library used to manage PKI realms on remote hosts, either
# :command:`gnutls` or :command:`openssl`. GnuTLS is preferred on Debian hosts.
boss__pki__library: 'gnutls'

                                                                   # ]]]
# .. envvar:: boss__pki__realm_key_size [[[
#
# The key size in bits to use when generating realm RSA keys.
boss__pki__realm_key_size: '2048'

                                                                   # ]]]
# .. envvar:: boss__pki__system_realm [[[
#
# System-wide PKI realm which is used by services by default for server
# certificates. It will be set in Ansible local facts for use by other Ansible
# roles.
boss__pki__system_realm: '{{ ansible_local.pki.realm
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.realm|d())
                      else "domain" }}'

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_realm [[[
#
# System-wide PKI realm which is used by services by default for CA certificate
# (client authentication). It will be set in Ansible local facts for use by other
# Ansible roles.
boss__pki__system_ca_realm: '{{ boss__pki__system_realm }}'

                                                                   # ]]]
# .. envvar:: boss__pki__default_domain [[[
#
# Default DNS domain used to create Certificate Signing Requests. It will be
# specified in the certificate Subject if it's not redefined, as well as in the
# certificate SubjectAltName field.
boss__pki__default_domain: '{{ ansible_domain }}'

                                                                   # ]]]
# .. envvar:: boss__pki__default_subdomains [[[
#
# List of additional subdomains added by default to all domain specified in the
# Certificate Signing Request. The ``_wildcard_`` is a replacement for the ``*``
# character and means that each domain will have an alternative wildcard
# SubjectAltName.
boss__pki__default_subdomains: [ '_wildcard_' ]

                                                                   # ]]]
# .. envvar:: boss__pki__authority_preference [[[
#
# Order in which different certificate types are used. First certificate type
# found wins.
boss__pki__authority_preference: [ 'external', 'acme', 'internal', 'selfsigned' ]

                                                                   # ]]]
# .. envvar:: boss__pki__realms [[[
#
# List of PKI realms configured on all hosts.
# Refer to the :ref:`documentation of all options <boss__pki___ref_realms>` for
# more details.
boss__pki__realms: []

                                                                   # ]]]
# .. envvar:: boss__pki__default_realms [[[
#
# List of the default PKI realms configured on all hosts.
boss__pki__default_realms:

  - name: 'domain'
    acme: False
    default_subdomains: [ '{{ ansible_hostname }}', '_wildcard_' ]

                                                                   # ]]]
# .. envvar:: boss__pki__group_realms [[[
#
# List of PKI realms configured in specific inventory groups.
boss__pki__group_realms: []

                                                                   # ]]]
# .. envvar:: boss__pki__host_realms [[[
#
# List of PKI realms configured on specific hosts.
boss__pki__host_realms: []

                                                                   # ]]]
# .. envvar:: boss__pki__dependent_realms [[[
#
# List of PKI realms configured in a role dependency.
boss__pki__dependent_realms: []

                                                                   # ]]]
# .. envvar:: boss__pki__scheduler [[[
#
# Enable periodic runs of :program:`pki-realm` script for all PKI realms. The
# script will check realm structure and renew certificates that are near their
# expiration date.
boss__pki__scheduler: True

                                                                   # ]]]
# .. envvar:: boss__pki__scheduler_interval [[[
#
# Specify the interval of periodical tasks: ``hourly``, ``daily``, ``weekly``
# or ``monthly``.
boss__pki__scheduler_interval: 'weekly'

                                                                   # ]]]
# .. envvar:: boss__pki__dhparam [[[
#
# Specify if Diffie-Hellman parameters should be appended to the certificate
# chain. This is required by applications that don't support DHE parameters in
# a separate file like HAproxy, ZNC.
boss__pki__dhparam: '{{ (True
                  if (ansible_local|d() and ansible_local.dhparam|d() and
                      ansible_local.dhparam.default|d())
                  else False) | bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__dhparam_file [[[
#
# Path to the Diffie-Hellman parameters file which will be appended to the
# certificate chain, if specified.
boss__pki__dhparam_file: '{{ ansible_local.dhparam.default
                      if (ansible_local|d() and ansible_local.dhparam|d() and
                          ansible_local.dhparam.default)
                      else "" }}'
                                                                   # ]]]
                                                                   # ]]]
# Internal Certificate Authorities [[[
# ------------------------------------

# .. envvar:: boss__pki__ca_library [[[
#
# The crypto library used by the Certificate Authorities on the Ansible
# Controller, either :command:`openssl` or :command:`gnutls`. Currently OpenSSL library is
# preferred due to rich functionality.
boss__pki__ca_library: 'openssl'

                                                                   # ]]]
# .. envvar:: boss__pki__default_authority [[[
#
# Name of the default Certificate Authority to which host certificates are
# directed if a PKI realm does not specify a default Authority.
boss__pki__default_authority: 'domain'

                                                                   # ]]]
# .. envvar:: boss__pki__ca_domain [[[
#
# The DNS domain used by default for an Certificate Authority configuration if
# no specific ``item.domain`` is configured.
boss__pki__ca_domain: '{{ ansible_domain if ansible_domain else ansible_hostname }}'

                                                                   # ]]]
# .. envvar:: boss__pki__ca_organization [[[
#
# The organizations name to be used in Distinguished Names (subject).
boss__pki__ca_organization: '{{ boss__pki__ca_domain.split(".") | first | capitalize }}'

                                                                   # ]]]
# .. envvar:: boss__pki__ca_root_dn [[[
#
# The Distinguished Name (subject) of the Root Certificate Authority.
boss__pki__ca_root_dn: [ 'o={{ boss__pki__ca_organization }} Certificate Authority' ]

                                                                   # ]]]
# .. envvar:: boss__pki__ca_root_key_size [[[
#
# The key size in bits to use when generating the RSA Root CA key.
boss__pki__ca_root_key_size: '4096'

                                                                   # ]]]
# .. envvar:: boss__pki__ca_domain_dn [[[
#
# The Distinguished Name (subject) of the Domain Certificate Authority.
boss__pki__ca_domain_dn: [ 'o={{ boss__pki__ca_organization }}', 'ou=Domain CA' ]

                                                                   # ]]]
# .. envvar:: boss__pki__ca_domain_key_size [[[
#
# The key size in bits to use when generating the RSA Domain CA key.
boss__pki__ca_domain_key_size: '4096'

                                                                   # ]]]
# .. envvar:: boss__pki__ca_service_enabled [[[
#
# Enable or disable special Service Certificate Authority, which is a Root CA
# without intermediate CA and sign server certificates directly. This might be
# needed by specific applications like MySQL which do not support an
# intermediate CA.
boss__pki__ca_service_enabled: False

                                                                   # ]]]
# .. envvar:: boss__pki__ca_service_dn [[[
#
# The Distinguished Name (subject) of the Service Certificate Authority.
boss__pki__ca_service_dn: [ 'o={{ boss__pki__ca_organization }}', 'ou=Internal Services CA' ]

                                                                   # ]]]
# .. envvar:: boss__pki__ca_service_key_size [[[
#
# The key size in bits to use when generating the RSA Service CA key.
boss__pki__ca_service_key_size: '4096'

                                                                   # ]]]
# .. envvar:: boss__pki__authorities_ca_root [[[
#
# Configuration of the Root Certificate Authority.
boss__pki__authorities_ca_root:
  name: 'root'
  subdomain: 'root-ca'
  subject: '{{ boss__pki__ca_root_dn }}'
  key_size: '{{ boss__pki__ca_root_key_size }}'

                                                                   # ]]]
# .. envvar:: boss__pki__authorities_ca_domain [[[
#
# Configuration of the Domain Certificate Authority.
boss__pki__authorities_ca_domain:
  name: 'domain'
  subdomain: 'domain-ca'
  subject: '{{ boss__pki__ca_domain_dn }}'
  issuer_name: 'root'
  key_size: '{{ boss__pki__ca_domain_key_size }}'

                                                                   # ]]]
# .. envvar:: boss__pki__authorities_ca_service [[[
#
# Configuration of the Service Certificate Authority.
boss__pki__authorities_ca_service:
  name: 'service'
  subdomain: 'service-ca'
  subject: '{{ boss__pki__ca_service_dn }}'
  type: 'service'
  enabled: '{{ boss__pki__ca_service_enabled | bool }}'
  key_size: '{{ boss__pki__ca_service_key_size }}'

                                                                   # ]]]
# .. envvar:: boss__pki__authorities [[[
#
# List of internal Certificate Authorities managed on an Ansible Controller.
# Each CA is defined as a dictionary variable.
boss__pki__authorities:
  - '{{ boss__pki__authorities_ca_root }}'
  - '{{ boss__pki__authorities_ca_domain }}'
  - '{{ boss__pki__authorities_ca_service }}'

                                                                   # ]]]
# .. envvar:: boss__pki__dependent_authorities [[[
#
# List of Certificate Authorities defined as a role dependency.
boss__pki__dependent_authorities: []

                                                                   # ]]]
# .. envvar:: boss__pki__ca_certificates_path [[[
#
# The path inside :file:`secret/ca-certificates/` directory located on Ansible
# Controller where Root CA certificates will be symlinked by default. Can be
# one of:
#
# - ``by-group/all`` - certificates copied to all hosts;
#
# - ``by-group/{{ group_name }}`` - certificates copied to hosts in a specified
#   inventory group;
#
# - ``by-host/{{ boss__pki__fqdn }}`` - certificates copied to a specific host;
#
boss__pki__ca_certificates_path: 'by-group/all'
                                                                   # ]]]
                                                                   # ]]]
# Custom file management [[[
# --------------------------

# You can use custom file lists to copy files to remote hosts or install
# the content of Jinja variables. See :ref:`custom_file_management` for more
# details.

# .. envvar:: boss__pki__private_files [[[
#
# Copy private files to all hosts in inventory.
boss__pki__private_files: []

                                                                   # ]]]
# .. envvar:: boss__pki__group_private_files [[[
#
# Copy private files to hosts in specific inventory groups.
boss__pki__group_private_files: []

                                                                   # ]]]
# .. envvar:: boss__pki__host_private_files [[[
#
# Copy private files to specific hosts in inventory.
boss__pki__host_private_files: []

                                                                   # ]]]
# .. envvar:: boss__pki__public_files [[[
#
# Copy public files to all hosts in inventory.
boss__pki__public_files: []

                                                                   # ]]]
# .. envvar:: boss__pki__group_public_files [[[
#
# Copy public files to hosts in specific inventory group.
boss__pki__group_public_files: []

                                                                   # ]]]
# .. envvar:: boss__pki__host_public_files [[[
#
# Copy public files to specific hosts in inventory.
boss__pki__host_public_files: []
                                                                   # ]]]
                                                                   # ]]]
# System-wide CA Certificates [[[
# -------------------------------

# See :ref:`system_ca_certificates` for more details about management of
# system-wide CA certificates.

# .. envvar:: boss__pki__system_ca_certificates_trust_new [[[
#
# Set default trust policy for new certificates added to ``ca-certificates``
# system package.
boss__pki__system_ca_certificates_trust_new: True

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_blacklist [[[
#
# List of blacklisted CA certificates. You can specify either exact names of
# certificate files or use regular expressions. If a certificate is
# found in both lists, it will be blacklisted.
boss__pki__system_ca_certificates_blacklist:

  # Blacklist CNNIC Root Certificates
  # https://security.googleblog.com/2015/03/maintaining-digital-certificate-security.html
  - 'mozilla/CNNIC_ROOT.crt'
  - 'mozilla/China_Internet_Network_Information_Center_EV_Certificates_Root.crt'

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_whitelist [[[
#
# List of whitelisted CA certificates. You can specify either exact names of
# certificate files or use regular expressions.
boss__pki__system_ca_certificates_whitelist: []

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_download_by_host [[[
#
# If ``True``, by hosts CA certificates are downloaded on remote hosts.
boss__pki__system_ca_certificates_download_by_host: '{{ boss__pki__enabled|bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_download_by_group [[[
#
# If ``True``, by group CA certificates are downloaded on remote hosts.
boss__pki__system_ca_certificates_download_by_group: '{{ boss__pki__enabled|bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_download_all_hosts [[[
#
# If ``True``, CA certificates intended for all hosts are downloaded on remote
# hosts.
boss__pki__system_ca_certificates_download_all_hosts: '{{ boss__pki__enabled|bool }}'

                                                                   # ]]]
# .. envvar:: boss__pki__system_ca_certificates_download_all_hosts_force [[[
#
# If ``True``, force the download of CA certificates intended for all hosts.
# Note that this will overwrite by-host and by-group CA certificates.
# This option can be used to push new root certificates from a internal CA to
# hosts.
boss__pki__system_ca_certificates_download_all_hosts_force: False
                                                                   # ]]]
                                                                   # ]]]
                                                                   # ]]]
